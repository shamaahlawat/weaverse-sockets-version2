{"version":3,"sources":["../../src/controller/getUserRoom.js"],"names":["getRoom","socket","io","data","sender_id","receiver_id","workspace_id","roomCriteria","$or","$and","room","Room","findOne","emit","status","room_id","_id","console","log","roomjson","save","message","error"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,4BAAU,OAAOC,MAAP,EAAeC,EAAf,EAAmBC,IAAnB,KAA4B;AAC/C,QAAI;AACA,YAAIA,KAAKC,SAAL,IAAkBD,KAAKE,WAAvB,IAAsCF,KAAKG,YAA/C,EAA6D;AACzD;AACA;AACA;AACA;AACA;AACA,gBAAIC,eAAe;AACfC,qBAAK,CAAC;AACFC,0BAAM,CAAC;AACH,oCAAYN,KAAKC;AADd,qBAAD,EAEH;AACC,sCAAcD,KAAKE;AADpB,qBAFG;AADJ,iBAAD,EAMF;AACCI,0BAAM,CAAC;AACH,sCAAcN,KAAKC;AADhB,qBAAD,EAEH;AACC,oCAAYD,KAAKE;AADlB,qBAFG;AADP,iBANE;AADU,aAAnB;AAeA,gBAAIK,OAAO,MAAMC,aAAKC,OAAL,CAAaL,YAAb,CAAjB;AACA,gBAAIG,IAAJ,EAAU;AACNT,uBAAOY,IAAP,CAAY,eAAZ,EAA6B,EAAEC,QAAQ,IAAV,EAAgBC,SAASL,KAAKM,GAA9B,EAA7B;AACAC,wBAAQC,GAAR,CAAY,mDAAZ,EAAiE,EAAEJ,QAAQ,IAAV,EAAgBC,SAASL,KAAKM,GAA9B,EAAjE;AACA;AACH,aAJD,MAIO;AACH,oBAAIG,WAAW,IAAIR,YAAJ,CAAS;AACpB,gCAAYR,KAAKC,SADG;AAEpB,kCAAcD,KAAKE,WAFC;AAGpB,mCAAeF,KAAKG;AAHA,iBAAT,CAAf;;AAMA,sBAAMa,SAASC,IAAT,EAAN;AACAnB,uBAAOY,IAAP,CAAY,eAAZ,EAA6B,EAAEC,QAAQ,IAAV,EAAgBC,SAASI,SAASH,GAAlC,EAA7B;AACAC,wBAAQC,GAAR,CAAY,mDAAZ,EAAiE,EAAEJ,QAAQ,IAAV,EAAgBC,SAASI,SAASH,GAAlC,EAAjE;AACA;AACH;AAGJ,SAxCD,MAwCO;AACHf,mBAAOY,IAAP,CAAY,eAAZ,EAA6B,EAAEC,QAAQ,KAAV,EAAiBO,SAAS,sBAA1B,EAA7B;AACAJ,oBAAQC,GAAR,CAAY,mDAAZ,EAAiE,EAAEJ,QAAQ,KAAV,EAAiBO,SAAS,sBAA1B,EAAjE;AAEH;AAEJ,KA/CD,CA+CE,OAAOC,KAAP,EAAc;AACZL,gBAAQC,GAAR,CAAYI,KAAZ;AACH;AACJ,CAnDM","file":"getUserRoom.js","sourcesContent":["import { Room } from '../models';\n\nexport const getRoom = async (socket, io, data) => {\n    try {\n        if (data.sender_id && data.receiver_id && data.workspace_id) {\n            // if (data.token != socket.id) {\n            //     socket.emit('get_user_room', { status: false, message: \"Invalid/Missing token\" });\n            //     console.log(\"----------------------> after emmit get_user_room\", { status: false, message: \"Invalid/Missing token\" })\n            //     return\n            // }\n            var roomCriteria = {\n                $or: [{\n                    $and: [{\n                        \"senderId\": data.sender_id\n                    }, {\n                        \"receiverId\": data.receiver_id\n                    }]\n                }, {\n                    $and: [{\n                        \"receiverId\": data.sender_id\n                    }, {\n                        \"senderId\": data.receiver_id\n                    }]\n                }]\n            }\n            let room = await Room.findOne(roomCriteria)\n            if (room) {\n                socket.emit('get_user_room', { status: true, room_id: room._id });\n                console.log(\"----------------------> after emmit get_user_room\", { status: true, room_id: room._id })\n                return\n            } else {\n                let roomjson = new Room({\n                    \"senderId\": data.sender_id,\n                    \"receiverId\": data.receiver_id,\n                    \"workspaceId\": data.workspace_id,\n                });\n\n                await roomjson.save();\n                socket.emit('get_user_room', { status: true, room_id: roomjson._id });\n                console.log(\"----------------------> after emmit get_user_room\", { status: true, room_id: roomjson._id })\n                return\n            }\n\n\n        } else {\n            socket.emit('get_user_room', { status: false, message: \"Invalid/Missing data\" });\n            console.log(\"----------------------> after emmit get_user_room\", { status: false, message: \"Invalid/Missing data\" })\n\n        }\n\n    } catch (error) {\n        console.log(error)\n    }\n}"]}