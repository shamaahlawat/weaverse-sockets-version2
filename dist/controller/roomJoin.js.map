{"version":3,"sources":["../../src/controller/roomJoin.js"],"names":["roomJoin","socket","io","msg","room_id","join","in","emit","status","console","log","message","roomJoin1","data","room_ids","length","i","roomLeave","leave","workspaceRoomJoin","workspace_id"],"mappings":"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","file":"roomJoin.js","sourcesContent":["export const roomJoin = (socket, io, msg) => {\n    if (msg.room_id) {\n        // msg.token && \n        // if (msg.token != socket.id) {\n        //     io.sockets.emit('room_join', { status: false, message: \"Invalid/Missing token\" });\n        //     console.log(\"----------------------> after emmit room_join\", { status: false, message: \"Invalid/Missing token\" })\n        //     return\n        // }\n\n        socket.join(msg.room_id, () => {\n            io.in(msg.room_id).emit(\"room_join\", { status: true, msg: \"room join\", room_id: msg.room_id })\n            console.log(\"----------------------> after emmit room_join\", { status: true, msg: \"room join\", room_id: msg.room_id })\n            return\n        })\n\n    } else {\n        socket.emit('room_join', { status: false, message: \"Invalid/Missing data\" });\n        console.log(\"----------------------> after emmit room_join\", { status: false, message: \"Invalid/Missing data\" })\n    }\n}\nexport const roomJoin1 = (socket, io, data) => {\n    const { room_ids = [] } = data\n    if (room_ids.length) {\n        for (const i in room_ids) {\n            socket.join(room_ids[i], () => {\n                io.in(room_ids[i]).emit(\"room_join\", { status: true, msg: \"room join\", room_id: room_ids[i] })\n                console.log(\"----------------------> after emmit room_join\", { status: true, msg: \"room join\", room_id: room_ids[i] })\n                return\n            })\n\n        }\n\n    }\n}\n\nexport const roomLeave = (socket, io, msg) => {\n    if (msg.room_id) {\n        // msg.token && \n        // if (msg.token != socket.id) {\n        //     io.sockets.emit('room_leave', { status: false, message: \"Invalid/Missing token\" });\n        //     console.log(\"----------------------> after emmit room_leave\", { status: false, message: \"Invalid/Missing token\" })\n        //     return\n        // }\n\n        socket.leave(msg.room_id, () => {\n            io.in(msg.room_id).emit(\"room_leave\", { status: true, msg: \"room leave\", room_id: msg.room_id })\n            console.log(\"----------------------> after emmit room_leave\", { status: true, msg: \"room leave\", room_id: msg.room_id })\n            return\n        })\n    } else {\n        socket.emit('room_leave', { status: false, message: \"Invalid/Missing data\" });\n        console.log(\"----------------------> after emmit room_leave\", { status: false, message: \"Invalid/Missing data\" })\n    }\n\n}\n\nexport const workspaceRoomJoin = (socket, io, msg) => {\n\n    if (msg.workspace_id) {\n        // msg.token &&\n        // if (msg.token != socket.id) {\n        //     io.sockets.emit('workspace_room_join', { status: false, message: \"Invalid/Missing token\" });\n        //     console.log(\"----------------------> after emmit workspace_room_join\", { status: false, message: \"Invalid/Missing token\" })\n        //     return\n        // }\n\n        socket.join(msg.workspace_id, () => {\n            io.in(msg.workspace_id).emit(\"workspace_room_join\", { status: true, msg: \"Workspace room join\" })\n            console.log(\"----------------------> after emmit workspace_room_join\", { status: true, msg: \"Workspace room join\" })\n            return\n        })\n    } else {\n        socket.emit('workspace_room_join', { status: false, message: \"Invalid/Missing data\" });\n        console.log(\"----------------------> after emmit workspace_room_join\", { status: false, message: \"Invalid/Missing data\" })\n    }\n\n\n} "]}