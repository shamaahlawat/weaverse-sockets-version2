{"version":3,"sources":["../../src/controller/message.js"],"names":["onMessage","socket","io","msg","room_id","workspace_id","chat","sender_id","receiver_id","isChannel","criteria","workspaceId","$or","$and","Chat","findOne","populate","path","select","chatData","senderId","receiverId","roomId","message","messageType","status","createdAt","Date","toISOString","chatData1","in","emit","console","log","myData","data","save","ChannelChatData","User","_id","firstName","lastName","email","phone","userdata","error"],"mappings":"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","file":"message.js","sourcesContent":["import { Chat, ChannelChat, User } from '../models';\n\nexport const onMessage = async (socket, io, msg) => {\n    try {\n        if (msg.room_id && msg.workspace_id && msg.chat && msg.sender_id && msg.receiver_id && !msg.isChannel) {\n            // msg.token && \n            // if (msg.token != socket.id) {\n            //     io.to(msg.room_id).emit('message', { status: false, message: \"Invalid/Missing token\" });\n            //     console.log(\"----------------------> after emmit message\", { status: false, message: \"Invalid/Missing token\" })\n            //     return\n            // }\n            var criteria = {\n                workspaceId: msg.workspace_id,\n                $or: [{\n                    $and: [{\n                        \"senderId\": msg.sender_id\n                    }, {\n                        \"receiverId\": msg.receiver_id\n                    }]\n                }, {\n                    $and: [{\n                        \"receiverId\": msg.sender_id\n                    }, {\n                        \"senderId\": msg.receiver_id\n                    }]\n                }]\n            }\n            let chat = await Chat.findOne(criteria)\n                .populate([\n                    {\n                        path: \"receiverId\",\n                        select: 'firstName lastName picture'\n                    },\n                    {\n                        path: \"senderId\",\n                        select: 'firstName lastName picture'\n                    },\n                ])\n            let chatData = {\n                senderId: chat && chat.senderId,\n                receiverId: chat && chat.receiverId,\n                roomId: msg.room_id,\n                workspaceId: msg.workspace_id,\n                // senderId: msg.sender_id,\n                // receiverId: msg.receiver_id,\n                message: msg.chat,\n                messageType: 'text',\n                status: 'unseen',\n                createdAt: new Date().toISOString()\n            }\n            let chatData1 = {\n                roomId: msg.room_id,\n                workspaceId: msg.workspace_id,\n                senderId: msg.sender_id,\n                receiverId: msg.receiver_id,\n                message: msg.chat,\n                messageType: 'text',\n                status: 'unseen',\n                createdAt: new Date().toISOString()\n            }\n            io.in(msg.room_id).emit(\"message\", { status: true, chatData })\n            console.log(\"----------------------> after emmit message\", { status: true, chatData })\n            delete (chatData1.createdAt)\n            var myData = new Chat(chatData1);\n            //   myData.save()\n            let data = await myData.save()\n            console.log(\"lksjdfljsdf\", data)\n            return\n        } else {\n            if (msg.isChannel) {\n                var criteria = {\n                    workspaceId: msg.workspace_id,\n                    senderId: msg.sender_id\n\n                }\n                let ChannelChatData = await User.findOne({ _id: msg.sender_id })\n                // .populate([\n                //     {\n                //         path: \"senderId\",\n                //         select: 'firstName lastName picture'\n                //     },\n                // ])\n                console.log(\"ChannelChatData=============\", ChannelChatData)\n                const { firstName, lastName, email, phone } = ChannelChatData\n                let userdata = { ...msg, firstName, lastName, email, phone, messageType: \"text\", message: msg.chat }\n                io.in(msg.room_id).emit(\"message\", { status: true, chatData: userdata })\n                let chatData1 = {\n                    roomId: msg.room_id,\n                    workspaceId: msg.workspace_id,\n                    senderId: msg.sender_id,\n                    message: msg.chat,\n                    messageType: 'text',\n                    status: 'unseen',\n                    createdAt: new Date().toISOString()\n                }\n                delete (chatData1.createdAt)\n                var myData = new Chat(chatData1);\n                //   myData.save()\n                let data = await myData.save()\n                return\n            }\n            socket.emit('message', { status: false, message: \"Invalid/Missing data\" });\n            console.log(\"----------------------> after emmit message\", { status: false, message: \"Invalid/Missing data\" })\n        }\n\n    } catch (error) {\n        console.log(error)\n    }\n}"]}