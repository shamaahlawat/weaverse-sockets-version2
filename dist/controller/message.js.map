{"version":3,"sources":["../../src/controller/message.js"],"names":["onMessage","socket","io","msg","room_id","workspace_id","chat","sender_id","receiver_id","chatData","roomId","workspaceId","senderId","receiverId","message","messageType","status","createdAt","Date","toISOString","in","emit","console","log","Chat","save","error"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,gCAAY,OAAOC,MAAP,EAAeC,EAAf,EAAmBC,GAAnB,KAA2B;AAChD,QAAI;AACA,YAAIA,IAAIC,OAAJ,IAAeD,IAAIE,YAAnB,IAAmCF,IAAIG,IAAvC,IAA+CH,IAAII,SAAnD,IAAgEJ,IAAIK,WAAxE,EAAqF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIC,WAAW;AACXC,wBAAQP,IAAIC,OADD;AAEXO,6BAAaR,IAAIE,YAFN;AAGXO,0BAAUT,IAAII,SAHH;AAIXM,4BAAYV,IAAIK,WAJL;AAKXM,yBAASX,IAAIG,IALF;AAMXS,6BAAa,MANF;AAOXC,wBAAQ,QAPG;AAQXC,2BAAW,IAAIC,IAAJ,GAAWC,WAAX;AARA,aAAf;;AAWAjB,eAAGkB,EAAH,CAAMjB,IAAIC,OAAV,EAAmBiB,IAAnB,CAAwB,SAAxB,EAAmC,EAAEL,QAAQ,IAAV,EAAgBP,QAAhB,EAAnC;AACAa,oBAAQC,GAAR,CAAY,6CAAZ,EAA2D,EAAEP,QAAQ,IAAV,EAAgBP,QAAhB,EAA3D;AACA,mBAAQA,SAASQ,SAAjB;AACA,kBAAM,IAAIO,YAAJ,CAASf,QAAT,EAAmBgB,IAAnB,EAAN;AACA;AACH,SAvBD,MAuBO;AACHxB,mBAAOoB,IAAP,CAAY,SAAZ,EAAuB,EAAEL,QAAQ,KAAV,EAAiBF,SAAS,sBAA1B,EAAvB;AACAQ,oBAAQC,GAAR,CAAY,6CAAZ,EAA2D,EAAEP,QAAQ,KAAV,EAAiBF,SAAS,sBAA1B,EAA3D;AACH;AAEJ,KA7BD,CA6BE,OAAOY,KAAP,EAAc;AACZJ,gBAAQC,GAAR,CAAYG,KAAZ;AACH;AACJ,CAjCM","file":"message.js","sourcesContent":["import { Chat } from '../models';\n\nexport const onMessage = async (socket, io, msg) => {\n    try {\n        if (msg.room_id && msg.workspace_id && msg.chat && msg.sender_id && msg.receiver_id) {\n            // msg.token && \n            // if (msg.token != socket.id) {\n            //     io.to(msg.room_id).emit('message', { status: false, message: \"Invalid/Missing token\" });\n            //     console.log(\"----------------------> after emmit message\", { status: false, message: \"Invalid/Missing token\" })\n            //     return\n            // }\n            let chatData = {\n                roomId: msg.room_id,\n                workspaceId: msg.workspace_id,\n                senderId: msg.sender_id,\n                receiverId: msg.receiver_id,\n                message: msg.chat,\n                messageType: 'text',\n                status: 'unseen',\n                createdAt: new Date().toISOString()\n            }\n\n            io.in(msg.room_id).emit(\"message\", { status: true, chatData })\n            console.log(\"----------------------> after emmit message\", { status: true, chatData })\n            delete (chatData.createdAt)\n            await new Chat(chatData).save()\n            return\n        } else {\n            socket.emit('message', { status: false, message: \"Invalid/Missing data\" });\n            console.log(\"----------------------> after emmit message\", { status: false, message: \"Invalid/Missing data\" })\n        }\n\n    } catch (error) {\n        console.log(error)\n    }\n}"]}