{"version":3,"sources":["../../src/utils/jwt.js"],"names":["issueJWT","verifyJWT","decodeJWT","TOKEN_SECRET","ACCESS_TOKEN_EXPIRY","ACCESS_TOKEN_ALGO","REFRESH_TOKEN_EXPIRY","REFRESH_TOKEN_ALGO","CONFIG","Error","payload","token","jwt","sign","expiresIn","algorithm","isValid","verify","decoded","decode"],"mappings":";;;;;QAwBsBA,Q,GAAAA,Q;QAUAC,S,GAAAA,S;QAKAC,S,GAAAA,S;;AAvCtB;;;;AACA;;;;;;AAEA;;AAEA,MAAM;AACFC,gBADE;AAEFC,uBAFE;AAGFC,qBAHE;AAIFC,wBAJE;AAKFC;AALE,IAMFC,gBANJ;;AASA,IACI,CAACL,YAAD,IACA,CAACC,mBADD,IAEA,CAACC,iBAFD,IAGA,CAACC,oBAHD,IAIA,CAACC,kBALL,EAME;AACE,UAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAEM,eAAeT,QAAf,CAAwB,EAAEU,OAAF,EAAxB,EAAqC;AACxC,UAAMC,QAAQ,MAAMC,uBAAIC,IAAJ,CAASH,OAAT,EAAkBP,YAAlB,EAAgC;AAChDW,mBAAWV,mBADqC;AAEhDW,mBAAWV;AAFqC,KAAhC,CAApB;AAIA,WAAOM,KAAP;AACH;;AAIM,eAAeV,SAAf,CAAyB,EAAEU,KAAF,EAAzB,EAAoC;AACvC,UAAMK,UAAU,MAAMJ,uBAAIK,MAAJ,CAAWN,KAAX,EAAkBR,YAAlB,CAAtB;AACA,WAAOa,OAAP;AACH;;AAEM,eAAed,SAAf,CAAyB,EAAES,KAAF,EAAzB,EAAoC;AACvC,UAAMO,UAAU,MAAMN,uBAAIO,MAAJ,CAAWR,KAAX,EAAkBR,YAAlB,EAAgC;AAClDW,mBAAWV,mBADuC;AAElDW,mBAAWV;AAFuC,KAAhC,CAAtB;AAIA,WAAOa,OAAP;AACH","file":"jwt.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport CONFIG from '../config';\n\n// import config from '../config';\n\nconst {\n    TOKEN_SECRET,\n    ACCESS_TOKEN_EXPIRY,\n    ACCESS_TOKEN_ALGO,\n    REFRESH_TOKEN_EXPIRY,\n    REFRESH_TOKEN_ALGO\n} = CONFIG;\n\n\nif (\n    !TOKEN_SECRET ||\n    !ACCESS_TOKEN_EXPIRY ||\n    !ACCESS_TOKEN_ALGO ||\n    !REFRESH_TOKEN_EXPIRY ||\n    !REFRESH_TOKEN_ALGO\n) {\n    throw new Error('JWT settings not found in env');\n}\n\nexport async function issueJWT({ payload }) {\n    const token = await jwt.sign(payload, TOKEN_SECRET, {\n        expiresIn: ACCESS_TOKEN_EXPIRY,\n        algorithm: ACCESS_TOKEN_ALGO\n    });\n    return token;\n}\n\n\n\nexport async function verifyJWT({ token }) {\n    const isValid = await jwt.verify(token, TOKEN_SECRET);\n    return isValid;\n}\n\nexport async function decodeJWT({ token }) {\n    const decoded = await jwt.decode(token, TOKEN_SECRET, {\n        expiresIn: ACCESS_TOKEN_EXPIRY,\n        algorithm: ACCESS_TOKEN_ALGO\n    });\n    return decoded;\n}\n"]}