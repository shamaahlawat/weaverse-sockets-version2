{"version":3,"sources":["../src/index.js"],"names":["app","server","http","Server","io","use","PORT","process","env","listen","console","log","get","req","res","send","on","socket","id","msg"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;AACA;;;;AAUA,MAAMA,MAAM,wBAAZ;AACA,MAAMC,SAASC,eAAKC,MAAL,CAAYH,GAAZ,CAAf;AACA,MAAMI,KAAK,sBAASH,MAAT,CAAX;AACAD,IAAIK,GAAJ,CAAQ,qBAAR;;AAGA,MAAM,EAAEC,OAAO,IAAT,KAAkBC,QAAQC,GAAhC;AACAP,OAAOQ,MAAP,CAAcH,IAAd,EAAoB,MAAMI,QAAQC,GAAR,CAAa,0BAAyBL,IAAK,EAA3C,CAA1B,E,CAA0E;;AAE1EN,IAAIY,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvBA,QAAIC,IAAJ,CAAS,SAAT;AACAL,YAAQC,GAAR,CAAYE,GAAZ;AACH,CAHD;;AAKAT,GAAGY,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAC5BP,YAAQC,GAAR,CAAY,iCAAZ,EAA+CM,OAAOC,EAAtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACAD,WAAOD,EAAP,CAAU,qBAAV,EAAkCG,GAAD,IAAS;AACtCT,gBAAQC,GAAR,CAAY,+CAAZ,EAA6D,EAAEQ,GAAF,EAA7D;AACA,2CAAkBF,MAAlB,EAA0Bb,EAA1B,EAA8Be,GAA9B;AACH,KAHD;;AAKA;AACAF,WAAOD,EAAP,CAAU,eAAV,EAA4BG,GAAD,IAAS;AAChCT,gBAAQC,GAAR,CAAY,yCAAZ,EAAuD,EAAEQ,GAAF,EAAvD;AACA,iCAAQF,MAAR,EAAgBb,EAAhB,EAAoBe,GAApB;AACH,KAHD;;AAMA;AACAF,WAAOD,EAAP,CAAU,WAAV,EAAwBG,GAAD,IAAS;AAC5BT,gBAAQC,GAAR,CAAY,qCAAZ,EAAmD,EAAEQ,GAAF,EAAnD;AACA,kCAASF,MAAT,EAAiBb,EAAjB,EAAqBe,GAArB;AACH,KAHD;AAIA;AACAF,WAAOD,EAAP,CAAU,YAAV,EAAyBG,GAAD,IAAS;AAC7BT,gBAAQC,GAAR,CAAY,sCAAZ,EAAoD,EAAEQ,GAAF,EAApD;AACA,mCAAUF,MAAV,EAAkBb,EAAlB,EAAsBe,GAAtB;AACH,KAHD;AAIA;AACAF,WAAOD,EAAP,CAAU,SAAV,EAAsBG,GAAD,IAAS;AAC1BT,gBAAQC,GAAR,CAAY,mCAAZ,EAAiD,EAAEQ,GAAF,EAAjD;AACA,mCAAUF,MAAV,EAAkBb,EAAlB,EAAsBe,GAAtB;AACH,KAHD;;AAKAF,WAAOD,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1BN,gBAAQC,GAAR,CAAY,+CAAZ,EAA6DM,OAAOC,EAApE;AACH,KAFD;AAGH,CAzCD;;AA4CA;;;AAGA","file":"index.js","sourcesContent":["import express from \"express\";\nimport SocketIO from \"socket.io\"\nimport http from \"http\"\nimport cors from 'cors'\n\n\nimport './db';\nimport {\n    roomJoin,\n    onMessage,\n    onAuth,\n    getRoom,\n    workspaceRoomJoin,\n    roomLeave\n} from \"./controller\";\n\n\nconst app = express();\nconst server = http.Server(app);\nconst io = SocketIO(server);\napp.use(cors())\n\n\nconst { PORT = 8080 } = process.env;\nserver.listen(PORT, () => console.log(`Chat Listening on port ${PORT}`)); // eslint-disable-line no-console\n\napp.get(\"/\", (req, res) => {\n    res.send(\"Running\")\n    console.log(req)\n})\n\nio.on('connection', (socket) => {\n    console.log('--------------------->connected', socket.id);\n    //authenticate user \n\n    // socket.on('authentication', (userToken) => {\n    //     console.log('---------------------->authentication', { userToken })\n    //     onAuth(socket, io, userToken.token)\n    // })\n\n    // Workspace Join the room\n    socket.on(\"workspace_room_join\", (msg) => {\n        console.log('------------------------->workspace_room_join', { msg })\n        workspaceRoomJoin(socket, io, msg)\n    })\n\n    //get user room id\n    socket.on(\"get_user_room\", (msg) => {\n        console.log('------------------------->get_user_room', { msg })\n        getRoom(socket, io, msg)\n    })\n\n\n    // Join the room\n    socket.on(\"room_join\", (msg) => {\n        console.log('------------------------->room_join', { msg })\n        roomJoin(socket, io, msg)\n    })\n    // Join the room leave\n    socket.on(\"room_leave\", (msg) => {\n        console.log('------------------------->room_leave', { msg })\n        roomLeave(socket, io, msg)\n    })\n    // on message send\n    socket.on(\"message\", (msg) => {\n        console.log('------------------------->message', { msg })\n        onMessage(socket, io, msg)\n    })\n\n    socket.on('disconnect', () => {\n        console.log('--------------------------->user disconnected', socket.id);\n    });\n});\n\n\n// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkYmVkY2NkZTU4ZDAwN2E0NWNjOTI4OCIsImVtYWlsIjoicmF2aS5zaW5naDIwOTFAZ21haWwuY29tIiwiaWF0IjoxNTc1ODc1NzQ0LCJleHAiOjE1NzY0ODA1NDR9.nCVudQYHur4yjQXrBhED3rzmmd1LbXnfu-3IQhBbUuU\n\n\n//  heroku logs --tail -a=weaverse-sockets --source app"]}